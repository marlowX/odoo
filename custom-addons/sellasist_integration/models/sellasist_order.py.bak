from odoo import models, fields, api
import logging
import requests
from datetime import datetime, timedelta
import json
import time

_logger = logging.getLogger(__name__)

class SellasistOrder(models.Model):
    _name = 'sellasist.order'
    _description = 'Zam√≥wienie Sellasist'
    _rec_name = 'sellasist_id'
    _order = 'date desc'

    # Podstawowe informacje
    sellasist_id = fields.Char('ID Sellasist', required=True, index=True)
    is_copied = fields.Boolean('Skopiowane')
    creator = fields.Char('Tw√≥rca')
    date = fields.Datetime('Data zam√≥wienia')
    order_master = fields.Char('Zam√≥wienie g≈Ç√≥wne')
    last_status_change = fields.Datetime('Ostatnia zmiana statusu')
    
    # Status
    status_id = fields.Char('ID statusu')
    status_name = fields.Char('Nazwa statusu')
    
    # Wysy≈Çka
    shipment_id = fields.Char('ID wysy≈Çki')
    shipment_name = fields.Char('Nazwa wysy≈Çki')
    shipment_total = fields.Float('Koszt wysy≈Çki')
    shipment_pickup_point = fields.Char('Punkt odbioru')
    shipment_pickup_code = fields.Char('Kod punktu odbioru')
    delivery_date = fields.Date('Data dostawy')
    shipment_internal_name = fields.Char('Wewnƒôtrzna nazwa wysy≈Çki')
    
    # P≈Çatno≈õƒá
    payment_id = fields.Char('ID p≈Çatno≈õci')
    payment_name = fields.Char('Nazwa p≈Çatno≈õci')
    payment_paid = fields.Float('Zap≈Çacona kwota')
    payment_paid_date = fields.Datetime('Data p≈Çatno≈õci')
    payment_cod = fields.Boolean('Pobranie')
    payment_status = fields.Char('Status p≈Çatno≈õci')
    payment_currency = fields.Char('Waluta')
    payment_tax = fields.Float('Podatek')
    
    # Dodatkowe pola
    placeholder = fields.Boolean('Placeholder')
    important = fields.Boolean('Wa≈ºne')
    deadline = fields.Date('Termin')
    source = fields.Char('≈πr√≥d≈Ço')
    shop = fields.Char('Sklep')
    tracking_number = fields.Char('Numer ≈õledzenia')
    document_number = fields.Char('Numer dokumentu')
    invoice = fields.Boolean('Faktura')
    email = fields.Char('Email')
    total = fields.Float('Warto≈õƒá ca≈Çkowita')
    comment = fields.Text('Komentarz')
    
    # Dane zewnƒôtrzne
    external_id = fields.Char('ID zewnƒôtrzne')
    external_login = fields.Char('Login zewnƒôtrzny')
    external_user_id = fields.Char('ID u≈ºytkownika zewnƒôtrznego')
    external_account = fields.Char('Konto zewnƒôtrzne')
    external_account_name = fields.Char('Nazwa konta zewnƒôtrznego')
    external_shipment_name = fields.Char('Nazwa wysy≈Çki zewnƒôtrznej')
    external_payment_name = fields.Char('Nazwa p≈Çatno≈õci zewnƒôtrznej')
    external_number_of_packages = fields.Char('Liczba paczek')
    external_smart = fields.Char('Smart zewnƒôtrzne')
    external_type = fields.Char('Typ zewnƒôtrzny')
    
    # Adresy - rachunek
    bill_name = fields.Char('Imiƒô (rachunek)')
    bill_surname = fields.Char('Nazwisko (rachunek)')
    bill_street = fields.Char('Ulica (rachunek)')
    bill_home_number = fields.Char('Numer domu (rachunek)')
    bill_flat_number = fields.Char('Numer mieszkania (rachunek)')
    bill_description = fields.Text('Opis (rachunek)')
    bill_postcode = fields.Char('Kod pocztowy (rachunek)')
    bill_city = fields.Char('Miasto (rachunek)')
    bill_state = fields.Char('Wojew√≥dztwo (rachunek)')
    bill_phone = fields.Char('Telefon (rachunek)')
    bill_company_name = fields.Char('Nazwa firmy (rachunek)')
    bill_company_nip = fields.Char('NIP (rachunek)')
    bill_country_id = fields.Char('ID kraju (rachunek)')
    bill_country_name = fields.Char('Nazwa kraju (rachunek)')
    bill_country_code = fields.Char('Kod kraju (rachunek)')
    
    # Adresy - wysy≈Çka
    ship_name = fields.Char('Imiƒô (wysy≈Çka)')
    ship_surname = fields.Char('Nazwisko (wysy≈Çka)')
    ship_street = fields.Char('Ulica (wysy≈Çka)')
    ship_home_number = fields.Char('Numer domu (wysy≈Çka)')
    ship_flat_number = fields.Char('Numer mieszkania (wysy≈Çka)')
    ship_description = fields.Text('Opis (wysy≈Çka)')
    ship_postcode = fields.Char('Kod pocztowy (wysy≈Çka)')
    ship_city = fields.Char('Miasto (wysy≈Çka)')
    ship_state = fields.Char('Wojew√≥dztwo (wysy≈Çka)')
    ship_phone = fields.Char('Telefon (wysy≈Çka)')
    ship_company_name = fields.Char('Nazwa firmy (wysy≈Çka)')
    ship_company_nip = fields.Char('NIP (wysy≈Çka)')
    ship_country_id = fields.Char('ID kraju (wysy≈Çka)')
    ship_country_name = fields.Char('Nazwa kraju (wysy≈Çka)')
    ship_country_code = fields.Char('Kod kraju (wysy≈Çka)')
    
    # Punkt odbioru
    pickup_code = fields.Char('Kod punktu odbioru')
    pickup_type = fields.Char('Typ punktu odbioru')
    pickup_address = fields.Text('Adres punktu odbioru')
    
    # Pola JSON dla z≈Ço≈ºonych danych
    raw_data = fields.Text('Surowe dane JSON')
    carts_data = fields.Text('Dane koszyk√≥w')
    payments_data = fields.Text('Dane p≈Çatno≈õci')
    additional_fields_data = fields.Text('Dodatkowe pola')
    notes_data = fields.Text('Notatki')
    
    # PowiƒÖzania z Odoo
    sale_order_id = fields.Many2one('sale.order', 'Zam√≥wienie sprzeda≈ºy')
    partner_id = fields.Many2one('res.partner', 'Klient')
    account_move_id = fields.Many2one('account.move', 'Faktura/Paragon')
    
    # Status synchronizacji
    sync_status = fields.Selection([
        ('new', 'Nowe'),
        ('synced', 'Zsynchronizowane'),
        ('error', 'B≈ÇƒÖd'),
    ], string='Status synchronizacji', default='new')
    synced = fields.Boolean('Zsynchronizowane', default=False)
    sync_error = fields.Text('B≈ÇƒÖd synchronizacji')
    last_sync = fields.Datetime('Ostatnia synchronizacja')

    @api.model
    def sync_orders_from_sellasist(self, hours_back=24):
        """
        G≈Ç√≥wna metoda synchronizacji
        """
        config = self.env['sellasist.config'].search([('active', '=', True)], limit=1)
        if not config:
            _logger.error("Brak aktywnej konfiguracji Sellasist")
            return False
            
        try:
            # Przygotuj daty
            date_to = datetime.now()
            date_from = date_to - timedelta(hours=hours_back)
            
            _logger.info(f"üöÄ Rozpoczynam synchronizacjƒô od {date_from} do {date_to}")
            
            # 1. AKTUALIZACJE - orders_logs (tylko istniejƒÖce zam√≥wienia)
            updated_count = self._sync_order_updates(config, date_from, date_to)
            
            # 2. NOWE ZAM√ìWIENIA - orders (wszystkie z zakresu dat)
            new_count = self._sync_new_orders_by_date_range(config, date_from, date_to)
            
            _logger.info(f"‚úÖ Synchronizacja zako≈Ñczona: {updated_count} aktualizacji, {new_count} nowych zam√≥wie≈Ñ")
            return True
            
        except Exception as e:
            _logger.error(f"‚ùå B≈ÇƒÖd g≈Ç√≥wnej synchronizacji: {str(e)}")
            return False

    def _sync_order_updates(self, config, date_from, date_to):
        """
        AKTUALIZACJE - Synchronizuj zmiany w istniejƒÖcych zam√≥wieniach z orders_logs
        """
        try:
            _logger.info("üìù Rozpoczynam synchronizacjƒô aktualizacji (orders_logs)...")
            
            headers = {
                'accept': 'application/json',
                'apiKey': config.api_key
            }
            
            params = {
                'date_from': date_from.strftime('%Y-%m-%d %H:%M:%S'),
                'date_to': date_to.strftime('%Y-%m-%d %H:%M:%S')
            }
            
            response = requests.get(
                'https://alpma.sellasist.pl/api/v1/orders_logs',
                headers=headers,
                params=params,
                timeout=30
            )
            
            if response.status_code != 200:
                _logger.error(f"‚ùå B≈ÇƒÖd API orders_logs: {response.status_code}")
                return 0
                
            orders_logs = response.json()
            _logger.info(f"üìã Pobrano {len(orders_logs)} log√≥w zmian")
            
            if not orders_logs:
                _logger.info("‚úÖ Brak zmian do aktualizacji")
                return 0
            
            # WyciƒÖgnij unikalne ID zam√≥wie≈Ñ kt√≥re zosta≈Çy zmienione
            unique_order_ids = list(set([log.get('order_id') for log in orders_logs if log.get('order_id')]))
            _logger.info(f"üîç Zam√≥wie≈Ñ z log√≥w zmian: {len(unique_order_ids)}")
            
            # Sprawd≈∫ kt√≥re zam√≥wienia JU≈ª MAMY w bazie (do aktualizacji)
            existing_orders = self.search([('sellasist_id', 'in', [str(oid) for oid in unique_order_ids])])
            existing_ids = set([int(order.sellasist_id) for order in existing_orders])
            
            # TYLKO AKTUALIZUJ istniejƒÖce zam√≥wienia
            orders_to_update = [oid for oid in unique_order_ids if oid in existing_ids]
            _logger.info(f"üîÑ Zam√≥wie≈Ñ do aktualizacji: {len(orders_to_update)}")
            
            updated_count = 0
            for order_id in orders_to_update:
                try:
                    if self._update_single_order(config, order_id):
                        updated_count += 1
                    time.sleep(0.5)  # Pauza
                except Exception as e:
                    _logger.error(f"‚ùå B≈ÇƒÖd aktualizacji zam√≥wienia {order_id}: {str(e)}")
                    continue
                    
            _logger.info(f"‚úÖ Zaktualizowano {updated_count} zam√≥wie≈Ñ")
            return updated_count
            
        except Exception as e:
            _logger.error(f"‚ùå B≈ÇƒÖd synchronizacji aktualizacji: {str(e)}")
            return 0

    def _sync_new_orders_by_date_range(self, config, date_from, date_to):
        """
        NOWE ZAM√ìWIENIA - Pobierz wszystkie zam√≥wienia z zakresu dat z orders (z paginacjƒÖ)
        """
        try:
            _logger.info("üÜï Rozpoczynam synchronizacjƒô nowych zam√≥wie≈Ñ (orders)...")
            
            headers = {
                'accept': 'application/json',
                'apiKey': config.api_key
            }
            
            new_count = 0
            page = 1
            limit = 100  # Maksymalny limit API
            total_processed = 0
            
            while True:
                params = {
                    'date_from': date_from.strftime('%Y-%m-%d %H:%M:%S'),
                    'date_to': date_to.strftime('%Y-%m-%d %H:%M:%S'),
                    'page': page,
                    'limit': limit
                }
                
                _logger.info(f"üìÑ Pobieranie strony {page}...")
                
                response = requests.get(
                    'https://alpma.sellasist.pl/api/v1/orders',
                    headers=headers,
                    params=params,
                    timeout=30
                )
                
                if response.status_code != 200:
                    _logger.error(f"‚ùå B≈ÇƒÖd API orders strona {page}: {response.status_code}")
                    break
                    
                orders_data = response.json()
                
                if not orders_data or len(orders_data) == 0:
                    _logger.info(f"üèÅ Strona {page}: brak danych - koniec")
                    break
                
                _logger.info(f"üì¶ Strona {page}: {len(orders_data)} zam√≥wie≈Ñ")
                total_processed += len(orders_data)
                
                # Sprawd≈∫ kt√≥re zam√≥wienia sƒÖ NOWE (nie ma ich w bazie)
                order_ids = [order.get('id') for order in orders_data if order.get('id')]
                existing_orders = self.search([('sellasist_id', 'in', [str(oid) for oid in order_ids])])
                existing_ids = set([int(order.sellasist_id) for order in existing_orders])
                
                new_order_ids = [oid for oid in order_ids if oid not in existing_ids]
                _logger.info(f"üÜï Strona {page}: {len(new_order_ids)} nowych zam√≥wie≈Ñ")
                
                # Przetw√≥rz TYLKO nowe zam√≥wienia
                for order_id in new_order_ids:
                    try:
                        if self._create_new_order(config, order_id):
                            new_count += 1
                        time.sleep(0.5)  # Pauza
                    except Exception as e:
                        _logger.error(f"‚ùå B≈ÇƒÖd tworzenia zam√≥wienia {order_id}: {str(e)}")
                        continue
                
                # Sprawd≈∫ czy to ostatnia strona
                if len(orders_data) < limit:
                    _logger.info(f"üèÅ Ostatnia strona - przetworzono {total_processed} zam√≥wie≈Ñ ≈ÇƒÖcznie")
                    break
                    
                page += 1
                time.sleep(1)  # Pauza miƒôdzy stronami
                
            _logger.info(f"‚úÖ Utworzono {new_count} nowych zam√≥wie≈Ñ")
            return new_count
            
        except Exception as e:
            _logger.error(f"‚ùå B≈ÇƒÖd synchronizacji nowych zam√≥wie≈Ñ: {str(e)}")
            return 0

    def _update_single_order(self, config, order_id):
        """
        Aktualizuj istniejƒÖce zam√≥wienie pe≈Çnymi danymi z orders/{id}
        """
        try:
            # Pobierz pe≈Çne dane zam√≥wienia
            full_data = self._fetch_order_details(config, order_id)
            if not full_data:
                return False
            
            # Znajd≈∫ istniejƒÖce zam√≥wienie
            existing_order = self.search([('sellasist_id', '=', str(order_id))], limit=1)
            if not existing_order:
                _logger.warning(f"‚ö†Ô∏è Nie znaleziono zam√≥wienia {order_id} do aktualizacji")
                return False
            
            # Przygotuj dane do aktualizacji
            vals = self._prepare_order_vals(full_data)
            vals['last_sync'] = fields.Datetime.now()
            
            # Aktualizuj zam√≥wienie
            existing_order.write(vals)
            _logger.info(f"üîÑ Zaktualizowano zam√≥wienie {order_id}")
            return True
            
        except Exception as e:
            _logger.error(f"‚ùå B≈ÇƒÖd aktualizacji zam√≥wienia {order_id}: {str(e)}")
            return False

    def _create_new_order(self, config, order_id):
        """
        Utw√≥rz nowe zam√≥wienie z pe≈Çnymi danymi z orders/{id}
        """
        try:
            # Pobierz pe≈Çne dane zam√≥wienia
            full_data = self._fetch_order_details(config, order_id)
            if not full_data:
                return False
            
            # Sprawd≈∫ czy ju≈º nie istnieje (podw√≥jne zabezpieczenie)
            existing = self.search([('sellasist_id', '=', str(order_id))])
            if existing:
                _logger.info(f"‚ö†Ô∏è Zam√≥wienie {order_id} ju≈º istnieje - pomijam")
                return False
            
            # Przygotuj dane do utworzenia
            vals = self._prepare_order_vals(full_data)
            vals['last_sync'] = fields.Datetime.now()
            
            # Utw√≥rz zam√≥wienie
            self.create(vals)
            _logger.info(f"‚ú® Utworzono nowe zam√≥wienie {order_id}")
            return True
            
        except Exception as e:
            _logger.error(f"‚ùå B≈ÇƒÖd tworzenia zam√≥wienia {order_id}: {str(e)}")
            return False

    def _fetch_order_details(self, config, order_id):
        """
        Pobierz pe≈Çne dane zam√≥wienia z API orders/{id}
        """
        try:
            headers = {
                'accept': '*/*',
                'apiKey': config.api_key
            }
            
            response = requests.get(
                f'https://alpma.sellasist.pl/api/v1/orders/{order_id}',
                headers=headers,
                timeout=30
            )
            
            if response.status_code != 200:
                _logger.error(f"‚ùå B≈ÇƒÖd API orders/{order_id}: {response.status_code}")
                return None
                
            return response.json()
            
        except Exception as e:
            _logger.error(f"‚ùå B≈ÇƒÖd pobierania szczeg√≥≈Ç√≥w zam√≥wienia {order_id}: {str(e)}")
            return None

    def _prepare_order_vals(self, data):
        """Przygotuj warto≈õci do zapisu z danych API"""
        def safe_datetime(date_str):
            if date_str:
                try:
                    return datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S')
                except:
                    return None
            return None
            
        def safe_date(date_str):
            if date_str:
                try:
                    return datetime.strptime(date_str, '%Y-%m-%d').date()
                except:
                    return None
            return None
            
        def safe_float(value, default=0.0):
            if value is None or value == '':
                return default
            try:
                return float(value)
            except (ValueError, TypeError):
                return default

        # Podstawowe dane
        vals = {
            'sellasist_id': str(data.get('id', '')),
            'is_copied': data.get('is_copied') == 'true',
            'creator': data.get('creator', ''),
            'date': safe_datetime(data.get('date')),
            'order_master': data.get('order_master'),
            'last_status_change': safe_datetime(data.get('last_status_change')),
            'placeholder': data.get('placeholder') == '1',
            'important': data.get('important') == '1',
            'deadline': safe_date(data.get('deadline')),
            'source': data.get('source', ''),
            'shop': data.get('shop'),
            'tracking_number': data.get('tracking_number'),
            'document_number': data.get('document_number', ''),
            'invoice': data.get('invoice') == '1',
            'email': data.get('email', ''),
            'total': safe_float(data.get('total')),
            'comment': data.get('comment', ''),
            'raw_data': json.dumps(data),
            'sync_status': 'new',
        }
        
        # Status
        if data.get('status'):
            status = data['status']
            vals.update({
                'status_id': status.get('id', ''),
                'status_name': status.get('name', ''),
            })
            
        # Wysy≈Çka
        if data.get('shipment'):
            shipment = data['shipment']
            vals.update({
                'shipment_id': shipment.get('id', ''),
                'shipment_name': shipment.get('name', ''),
                'shipment_total': safe_float(shipment.get('total')),
                'shipment_pickup_point': shipment.get('pickup_point', ''),
                'shipment_pickup_code': shipment.get('pickup_code', ''),
                'delivery_date': safe_date(shipment.get('delivery_date')),
                'shipment_internal_name': shipment.get('internal_name', ''),
            })
            
        # P≈Çatno≈õƒá
        if data.get('payment'):
            payment = data['payment']
            vals.update({
                'payment_id': payment.get('id', ''),
                'payment_name': payment.get('name', ''),
                'payment_paid': safe_float(payment.get('paid')),
                'payment_paid_date': safe_datetime(payment.get('paid_date')),
                'payment_cod': payment.get('cod') == 1,
                'payment_status': payment.get('status', ''),
                'payment_currency': payment.get('currency', ''),
                'payment_tax': safe_float(payment.get('tax')),
            })
            
        # Dane zewnƒôtrzne
        if data.get('external_data'):
            ext = data['external_data']
            vals.update({
                'external_id': ext.get('external_id', ''),
                'external_login': ext.get('external_login', ''),
                'external_user_id': ext.get('external_user_id', ''),
                'external_account': ext.get('external_account', ''),
                'external_account_name': ext.get('external_account_name', ''),
                'external_shipment_name': ext.get('external_shipment_name', ''),
                'external_payment_name': ext.get('external_payment_name', ''),
                'external_number_of_packages': ext.get('external_number_of_packages', ''),
                'external_smart': ext.get('external_smart', ''),
                'external_type': ext.get('external_type', ''),
            })
            
        # Adres rachunku
        if data.get('bill_address'):
            bill = data['bill_address']
            vals.update({
                'bill_name': bill.get('name', ''),
                'bill_surname': bill.get('surname', ''),
                'bill_street': bill.get('street', ''),
                'bill_home_number': bill.get('home_number', ''),
                'bill_flat_number': bill.get('flat_number', ''),
                'bill_description': bill.get('description', ''),
                'bill_postcode': bill.get('postcode', ''),
                'bill_city': bill.get('city', ''),
                'bill_state': bill.get('state', ''),
                'bill_phone': bill.get('phone', ''),
                'bill_company_name': bill.get('company_name', ''),
                'bill_company_nip': bill.get('company_nip', ''),
            })
            if bill.get('country'):
                country = bill['country']
                vals.update({
                    'bill_country_id': country.get('id', ''),
                    'bill_country_name': country.get('name', ''),
                    'bill_country_code': country.get('code', ''),
                })
                
        # Adres wysy≈Çki
        if data.get('shipment_address'):
            ship = data['shipment_address']
            vals.update({
                'ship_name': ship.get('name', ''),
                'ship_surname': ship.get('surname', ''),
                'ship_street': ship.get('street', ''),
                'ship_home_number': ship.get('home_number', ''),
                'ship_flat_number': ship.get('flat_number', ''),
                'ship_description': ship.get('description', ''),
                'ship_postcode': ship.get('postcode', ''),
                'ship_city': ship.get('city', ''),
                'ship_state': ship.get('state', ''),
                'ship_phone': ship.get('phone', ''),
                'ship_company_name': ship.get('company_name', ''),
                'ship_company_nip': ship.get('company_nip', ''),
            })
            if ship.get('country'):
                country = ship['country']
                vals.update({
                    'ship_country_id': country.get('id', ''),
                    'ship_country_name': country.get('name', ''),
                    'ship_country_code': country.get('code', ''),
                })
                
        # Punkt odbioru
        if data.get('pickup_point'):
            pickup = data['pickup_point']
            vals.update({
                'pickup_code': pickup.get('code', ''),
                'pickup_type': pickup.get('type', ''),
                'pickup_address': pickup.get('address', ''),
            })
            
        # Zapisz z≈Ço≈ºone dane jako JSON
        if data.get('carts'):
            vals['carts_data'] = json.dumps(data['carts'])
        if data.get('payments'):
            vals['payments_data'] = json.dumps(data['payments'])
        if data.get('additional_fields'):
            vals['additional_fields_data'] = json.dumps(data['additional_fields'])
        if data.get('notes'):
            vals['notes_data'] = json.dumps(data['notes'])
            
        return vals

    def action_sync_to_sale_order(self):
        """Utw√≥rz zam√≥wienie sprzeda≈ºy w Odoo"""
        self.ensure_one()
        
        if self.sale_order_id:
            return {
                'type': 'ir.actions.act_window',
                'res_model': 'sale.order',
                'res_id': self.sale_order_id.id,
                'view_mode': 'form',
                'target': 'current',
            }
            
        # Znajd≈∫ lub utw√≥rz klienta
        partner = self._get_or_create_partner()
        
        # Utw√≥rz zam√≥wienie sprzeda≈ºy
        sale_vals = {
            'partner_id': partner.id,
            'date_order': self.date or fields.Datetime.now(),
            'client_order_ref': self.document_number or self.sellasist_id,
            'note': self.comment,
            'state': 'draft',
        }
        
        sale_order = self.env['sale.order'].create(sale_vals)
        
        # Dodaj linie zam√≥wienia z danych carts
        if self.carts_data:
            carts = json.loads(self.carts_data)
            for cart in carts:
                # Znajd≈∫ lub utw√≥rz produkt
                product = self._get_or_create_product(cart)
                
                line_vals = {
                    'order_id': sale_order.id,
                    'product_id': product.id,
                    'product_uom_qty': float(cart.get('quantity', 1)),
                    'price_unit': float(cart.get('price', 0)),
                    'name': cart.get('name', ''),
                }
                self.env['sale.order.line'].create(line_vals)
        
        # PowiƒÖ≈º zam√≥wienia
        self.sale_order_id = sale_order.id
        self.synced = True
        self.sync_status = 'synced'
        
        # Automatycznie utw√≥rz fakturƒô/paragon je≈õli zam√≥wienie jest op≈Çacone
        if self.payment_status == 'paid':
            self._create_invoice(sale_order)
        
        return {
            'type': 'ir.actions.act_window',
            'res_model': 'sale.order',
            'res_id': sale_order.id,
            'view_mode': 'form',
            'target': 'current',
        }

    def _create_invoice(self, sale_order):
        """Utw√≥rz fakturƒô lub paragon na podstawie zam√≥wienia"""
        try:
            # Potwierd≈∫ zam√≥wienie
            sale_order.action_confirm()
            
            # Utw√≥rz fakturƒô
            invoice_vals = sale_order._prepare_invoice()
            
            # Okre≈õl typ dokumentu na podstawie pola invoice
            if self.invoice and self.bill_company_nip:
                # Faktura VAT dla firmy
                invoice_vals.update({
                    'move_type': 'out_invoice',
                    'invoice_date': self.payment_paid_date.date() if self.payment_paid_date else fields.Date.today(),
                })
            else:
                # Paragon dla osoby prywatnej
                invoice_vals.update({
                    'move_type': 'out_receipt',
                    'invoice_date': self.payment_paid_date.date() if self.payment_paid_date else fields.Date.today(),
                })
            
            invoice = self.env['account.move'].create(invoice_vals)
            
            # PowiƒÖ≈º z zam√≥wieniem Sellasist
            self.account_move_id = invoice.id
            
            # Automatycznie potwierd≈∫ fakturƒô je≈õli jest op≈Çacona
            if self.payment_status == 'paid':
                invoice.action_post()
                
                # Zarejestruj p≈Çatno≈õƒá
                self._register_payment(invoice)
            
            _logger.info(f"Utworzono fakturƒô/paragon {invoice.name} dla zam√≥wienia {self.sellasist_id}")
            
        except Exception as e:
            _logger.error(f"B≈ÇƒÖd tworzenia faktury dla zam√≥wienia {self.sellasist_id}: {str(e)}")

    def _register_payment(self, invoice):
        """Zarejestruj p≈Çatno≈õƒá dla faktury"""
        try:
            if not invoice or invoice.payment_state == 'paid':
                return
                
            # Znajd≈∫ dziennik kasowy/bankowy
            payment_journal = self.env['account.journal'].search([
                ('type', 'in', ['bank', 'cash']),
                ('company_id', '=', invoice.company_id.id)
            ], limit=1)
            
            if not payment_journal:
                _logger.warning("Brak dziennika p≈Çatno≈õci")
                return
            
            # Utw√≥rz p≈Çatno≈õƒá
            payment_vals = {
                'payment_type': 'inbound',
                'partner_type': 'customer',
                'partner_id': invoice.partner_id.id,
                'amount': self.payment_paid,
                'currency_id': invoice.currency_id.id,
                'date': self.payment_paid_date.date() if self.payment_paid_date else fields.Date.today(),
                'journal_id': payment_journal.id,
                'payment_method_line_id': payment_journal.inbound_payment_method_line_ids[0].id,
                'ref': f"P≈Çatno≈õƒá Sellasist {self.sellasist_id}",
            }
            
            payment = self.env['account.payment'].create(payment_vals)
            payment.action_post()
            
            # PowiƒÖ≈º p≈Çatno≈õƒá z fakturƒÖ
            invoice_lines = invoice.line_ids.filtered(lambda l: l.account_id.account_type == 'asset_receivable')
            payment_lines = payment.line_ids.filtered(lambda l: l.account_id.account_type == 'asset_receivable')
            
            if invoice_lines and payment_lines:
                (invoice_lines + payment_lines).reconcile()
                
            _logger.info(f"Zarejestrowano p≈Çatno≈õƒá {payment.name} dla faktury {invoice.name}")
            
        except Exception as e:
            _logger.error(f"B≈ÇƒÖd rejestracji p≈Çatno≈õci: {str(e)}")

    def _get_or_create_partner(self):
        """Znajd≈∫ lub utw√≥rz partnera na podstawie danych zam√≥wienia"""
        # Sprawd≈∫ czy istnieje partner z tym emailem
        partner = self.env['res.partner'].search([('email', '=', self.email)], limit=1)
        
        if not partner and self.bill_company_nip:
            # Sprawd≈∫ po NIP
            partner = self.env['res.partner'].search([('vat', '=', self.bill_company_nip)], limit=1)
            
        if not partner:
            # Utw√≥rz nowego partnera
            name = f"{self.bill_name} {self.bill_surname}".strip()
            if self.bill_company_name:
                name = self.bill_company_name
                
            partner_vals = {
                'name': name or 'Klient Sellasist',
                'email': self.email,
                'phone': self.bill_phone,
                'street': f"{self.bill_street} {self.bill_home_number}".strip(),
                'street2': self.bill_flat_number,
                'city': self.bill_city,
                'zip': self.bill_postcode,
                'vat': self.bill_company_nip,
                'is_company': bool(self.bill_company_name),
                'customer_rank': 1,
            }
            
            # Znajd≈∫ kraj
            if self.bill_country_code:
                country = self.env['res.country'].search([('code', '=', self.bill_country_code)], limit=1)
                if country:
                    partner_vals['country_id'] = country.id
                    
            partner = self.env['res.partner'].create(partner_vals)
            
        return partner

    def _get_or_create_product(self, cart_data):
        """Znajd≈∫ lub utw√≥rz produkt na podstawie danych koszyka"""
        ean = cart_data.get('ean', '')
        symbol = cart_data.get('symbol', '')
        
        # Sprawd≈∫ po EAN/kodzie kreskowym
        product = None
        if ean:
            product = self.env['product.product'].search([('barcode', '=', ean)], limit=1)
            
        if not product and symbol:
            # Sprawd≈∫ po default_code
            product = self.env['product.product'].search([('default_code', '=', symbol)], limit=1)
            
        if not product:
            # Utw√≥rz nowy produkt
            product_vals = {
                'name': cart_data.get('name', 'Produkt z Sellasist'),
                'default_code': symbol or '',
                'barcode': ean or '',
                'list_price': float(cart_data.get('price', 0)),
                'weight': float(cart_data.get('weight', 0)),
                'type': 'product',
                'invoice_policy': 'order',
            }
            product = self.env['product.product'].create(product_vals)
            
        return product

    def action_create_invoice(self):
        """Rƒôczne tworzenie faktury/paragonu"""
        self.ensure_one()
        
        if not self.sale_order_id:
            raise models.UserError("Najpierw utw√≥rz zam√≥wienie sprzeda≈ºy")
            
        if self.account_move_id:
            return {
                'type': 'ir.actions.act_window',
                'res_model': 'account.move',
                'res_id': self.account_move_id.id,
                'view_mode': 'form',
                'target': 'current',
            }
            
        self._create_invoice(self.sale_order_id)
        
        return {
            'type': 'ir.actions.act_window',
            'res_model': 'account.move',
            'res_id': self.account_move_id.id,
            'view_mode': 'form',
            'target': 'current',
        }

    @api.model
    def test_sync_api(self):
        """Test funkcji synchronizacji"""
        config = self.env['sellasist.config'].search([('active', '=', True)], limit=1)
        if not config:
            return "‚ùå Brak aktywnej konfiguracji Sellasist"
            
        try:
            import requests
            from datetime import datetime, timedelta
            
            headers = {
                'accept': 'application/json',
                'apiKey': config.api_key
            }
            
            # Test orders_logs dla aktualizacji
            date_to = datetime.now()
            date_from = date_to - timedelta(hours=2)
            
            params = {
                'date_from': date_from.strftime('%Y-%m-%d %H:%M:%S'),
                'date_to': date_to.strftime('%Y-%m-%d %H:%M:%S')
            }
            
            response_logs = requests.get(
                'https://alpma.sellasist.pl/api/v1/orders_logs',
                headers=headers,
                params=params,
                timeout=30
            )
            
            # Test orders dla nowych zam√≥wie≈Ñ
            params_orders = {
                'date_from': date_from.strftime('%Y-%m-%d %H:%M:%S'),
                'date_to': date_to.strftime('%Y-%m-%d %H:%M:%S'),
                'page': 1,
                'limit': 10
            }
            
            response_orders = requests.get(
                'https://alpma.sellasist.pl/api/v1/orders',
                headers=headers,
                params=params_orders,
                timeout=30
            )
            
            result = "üîç Test API Sellasist:\n\n"
            
            if response_logs.status_code == 200:
                logs_data = response_logs.json()
                unique_orders = list(set([log.get('order_id') for log in logs_data if log.get('order_id')]))
                result += f"‚úÖ orders_logs: {len(logs_data)} log√≥w, {len(unique_orders)} unikalnych zam√≥wie≈Ñ\n"
            else:
                result += f"‚ùå orders_logs: b≈ÇƒÖd {response_logs.status_code}\n"
                
            if response_orders.status_code == 200:
                orders_data = response_orders.json()
                result += f"‚úÖ orders: {len(orders_data)} zam√≥wie≈Ñ na stronie 1\n"
            else:
                result += f"‚ùå orders: b≈ÇƒÖd {response_orders.status_code}\n"
                
            # Sprawd≈∫ bazƒô danych
            total_orders = self.search_count([])
            result += f"\n Aktualne zam√≥wienia w bazie: {total_orders}"
                
            return result
                
        except Exception as e:
            return f"‚ùå B≈ÇƒÖd testu: {str(e)}"
